---
title: "Per Protoccol Development"

format: docx
  toc: true

# format:
#   html:
#     toc: true
#     embed-resources: true
#     # grid:
#     #   sidebar-width: 0px
#     #   body-width: 2000px
#     #   margin-width: 0px
#     #   gutter-width: 1.5rem
editor: source

execute: 
  echo: false
  warning: false
  message: false
---


```{r, load packages}
#| echo: false
pacman::p_load(here,         # For managing directory paths
               magrittr,     # For the assignment pipe operator %<>%
               tidyverse,    # For data manipulation tools
               # data.table,   # For reading .csv files
               # openxlsx,     # For reading .xlsx files
               tictoc,       # For timing and benchmarking functions
               gtsummary,    # For tables
               lme4,         # For linear mixed effect models (n.b. no pvals)
               install = FALSE)
```

# Load data
ee contains modeling data used for Aim 1 linear mixed effect model. ee does not contain index visits, since they are removed and the weight values are used to form the baseline weight values for ee. Load visits post id since it contains the index visits for ee.
```{r}
# Set the project root
proj_root <- "D:/PATHWEIGH/"

# Set the data delivery date to the appropriate data set
delivery <- 20240326

# Load ee model data
load(str_c(proj_root, "delivery_", delivery, "/data/mod_data_ee_", delivery, ".Rdata"))

# Load visits_post_id
load(str_c(proj_root, "delivery_", delivery, "/data/processed_visits_post_id_", delivery, ".Rdata"))
```

# Extract the index visits from visits post id
It is not sufficient to filter visits_post_id simply by the Arb_PersonIds in ee because ee is created so that only patients with 2 or more visits are included. Therefore filter visits_post_id separately by intervention
```{r}
ind_visits <- 
  c("Control", "Intervention") %>%
  purrr::map_df(
    ~visits_post_id %>%
      filter(Arb_PersonId %in% (ee %>% 
                                    filter(Intervention == .x) %>% 
                                    distinct(Arb_PersonId) %>% 
                                    pull(Arb_PersonId))) %>%
      filter(IndexVisit == 1,
             Enrolled == 1,
             Intervention.factor == .x)
  ) 
```

# Manipulate ind_visits and ee visits
```{r}
ind_visits %<>%
  mutate(Arb_PersonId = as.character(Arb_PersonId),
         Intervention = Intervention.factor)
ee %<>%
  mutate(Arb_PersonId = as.character(Arb_PersonId))
```

# Merge ind_visits and ee visits to create per protocol data (pp_data)
```{r}
# Bind ee data with the respective index visits
pp_data <- 
  bind_rows(ee, ind_visits) %>%
  arrange(Arb_PersonId, EncounterDate)
```

# Filter pp_data to visits that are less than or equal to 18 months after index
```{r}
# Filter pp data to 18 months
pp_data %<>%
  filter(N_months_post_id <= 18)
```

# Filter pp_data to patients that have visits in both intervention and control phases
First create a list of Arb_PersonIds that have two distinct types of Intervention values, then use that list to filter pp_data since having two distinct Intervention values suggests that a given patient has "Control" and "Intervention" rows.
```{r}
pp_ids <- 
pp_data %>%
  group_by(Arb_PersonId) %>%
  summarise(n = n_distinct(Intervention)) %>%
  filter(n == 2) %>%
  pull(Arb_PersonId)

pp_data %<>%
  filter(Arb_PersonId %in% pp_ids)
```

# Identify and flag patients that have at least one pathweigh visit
First create a list of Arb_PersonIds that have at least one PW_Visit, then use that list to create a new time invariant variable, pw, that denotes whether or not that person had a pathweigh visit.
```{r}
pw_ids <- 
  pp_data %>%
  mutate(PW_Visit = if_else(WPV_WMQ == 1 | WPV_IP == 1 | WPV_TH == 1 | WPV_smart == 1, 1, 0)) %>%
  filter(PW_Visit == 1) %>%
  distinct(Arb_PersonId) %>%
  pull(Arb_PersonId)

# Make a pathweigh exposed time invariant variable
pp_data %<>%
  mutate(pw = ifelse(Intervention == "Intervention" & Arb_PersonId %in% pw_ids, 1, 0))
```

# QA checks
Check that there are no visits in control phase that have evidence of pathweigh tool use.
```{r}
# Any rows with pw_tools in control? Should be zero.
pp_data %>%
  filter(PW_Visit == 1, 
         Intervention == "Control") %>%
  nrow()

# Check that all values per patient in the intervention are set to 1. Should be
# zero, the number of rows with n_distinct > 1
pp_data %>%
  filter(Intervention == "Intervention") %>%
  group_by(Arb_PersonId) %>%
  summarise(n = n_distinct(pw)) %>%
  filter(n > 1) %>%
  nrow()
```

# Tabulate the total number of visits and the number of visits in each phase
```{r}
pp_data %>%
  select(Intervention) %>%
  tbl_summary()
```


# Tabulate the total number of patients in each phase
N represents the total number of rows, one per patient in each phase
```{r}
pp_data %>%
  group_by(Arb_PersonId, Intervention) %>%
  slice_head() %>%
  ungroup() %>%
  select(Intervention) %>%
  tbl_summary()
```

# Tabulate the number of patients in the Intervention phase by use of pathweigh tools
```{r}
pp_data %>%
  filter(Intervention == "Intervention") %>%
  group_by(Arb_PersonId) %>%
  slice_head() %>%
  ungroup() %>%
  mutate(Any_PW_Visit = factor(pw)) %>%
  select(Any_PW_Visit) %>%
  tbl_summary()
```
# Breakdown of how Any_PW_visit is formed
```{r}
# Filter the patients that have any_pw visit
pp_data %>%
  filter(Intervention == "Intervention",
         pw == 1) %>%
  select(Arb_PersonId, WPV_WMQ, WPV_IP, WPV_TH, WPV_smart) %>%
  mutate(across(WPV_WMQ:WPV_smart, ~ ifelse(. == 0, NA, .))) %>%
  group_by(Arb_PersonId) %>%
  fill(WPV_WMQ:WPV_smart, .direction = "updown") %>%
  slice_head() %>%
  ungroup() %>%
  mutate(across(WPV_WMQ:WPV_smart, ~ifelse(is.na(.), 0, .))) %>%
  select(-Arb_PersonId) %>%
  tbl_summary()
```

# Create a data set for modeling the pp_data
Create the pw variable in the ee data set that is filtered without the index visits for modeling.
```{r}
# The number of non-index rows in pp_data. Should match the number of rows 
# filtered in ee
pp_data %>%
  filter(IndexVisit != 1) %>%
  nrow()

# The difference between pp_mod and pp_data is that pp_data contains the index
# visits, whereas pp_mod does not. ee is already set up for modeling, so filter
# it for the encounter ids in pp_data. Since ee does not contain any index visits
# the result should be the subset of of the patients of interest without any
# index visits
pp_mod_data  <- 
  ee %>% 
  filter(Arb_EncounterId %in% pp_data$Arb_EncounterId) %>%
  mutate(pw = ifelse(Intervention == "Intervention" & Arb_PersonId %in% pw_ids, 1, 0))
```

```{r}
# Redefine slope 1, slope 2, slope 3
pp_mod_data %<>%
  mutate(slope1 = ifelse(Intervention == "Control", 1, 0),
         slope2 = ifelse(pw == 1 & Intervention == "Intervention", 1, 0),
         slope3 = ifelse(pw == 0 & Intervention == "Intervention", 1, 0),
         )
```

```{r}
# Create binary variables
pp_mod_data %<>% 
  mutate(age_lt_45 = ifelse(Age_cat == "<=45", 1, 0),
         age_45_to_60 = ifelse(Age_cat == "45-60", 1, 0),
         age_gt_60 = ifelse(Age_cat == ">60", 1, 0),
         sex_m = ifelse(Sex == "Male", 1, 0),
         sex_f = ifelse(Sex == "Female", 1, 0),
         reth_nhw = ifelse(Race_Ethnicity == "Non-Hispanic White", 1, 0),
         reth_his = ifelse(Race_Ethnicity == "Hispanic or Latino", 1, 0),
         reth_blk = ifelse(Race_Ethnicity == "Black or African American", 1, 0),
         reth_asn = ifelse(Race_Ethnicity == "Asian", 1, 0),
         reth_oth = ifelse(Race_Ethnicity == "Other", 1, 0),
         reth_ukn = ifelse(Race_Ethnicity == "Unknown", 1, 0),
         year_at_ind0 = ifelse(Year_at_ind == "Year0", 1, 0),
         year_at_ind1 = ifelse(Year_at_ind == "Year1", 1, 0),
         year_at_ind2 = ifelse(Year_at_ind == "Year2", 1, 0),
         year_at_ind3 = ifelse(Year_at_ind == "Year3", 1, 0))
```

# PP model with patients that have both control and intervention visits (7,578 patients)
```{r, echo = FALSE, eval = FALSE}
lmer_mod <- lmerTest::lmer(Weight_dv ~ Age_cat + Sex + Race_Ethnicity + Year_at_ind + Weight_bl + slope1 +
          # 1 - Control group
          slope1:N_days_post_id + slope1:N_days_post_180 + 
          
          # 2 - Intervention group w PW tools
          slope2:N_days_post_id + slope2:N_days_post_180 + 
            
          # 3 - Intervention group no PW tools
          slope3:N_days_post_id + slope3:N_days_post_180 + 
          
          # Random effects, dept name causes convergence warnings   
          # (1| DepartmentExternalName) + (1| Arb_PersonId),
          (1|Arb_PersonId),
                
          # Input data frame
          data=pp_mod_data)

broom.mixed::tidy(lmer_mod)
```

```{r}
# Linear mixed model with binary variables
lmer_mod_bin <- lmerTest::lmer(Weight_dv ~ 
                   
          # age
          age_45_to_60 + age_gt_60 + 
           
          # sex
          sex_m + 
          
          # race ethnicity
          reth_his + reth_blk + reth_asn + reth_oth + reth_ukn + 
           
          # year at index
          year_at_ind1 + year_at_ind2 + year_at_ind3 + 
           
          # Weight at baseline
          Weight_bl + slope1 +
             
          # Slope1 is the same as Phase/Intervention group
          slope1:N_days_post_id + slope1:N_days_post_180 + 
          
          # Slope2 is a flag for those with any pathweigh tool in intervention
          slope2:N_days_post_id + slope2:N_days_post_180 +
          
          # Slope3 is a flag for those without pathweight tool in intervention 
          slope3:N_days_post_id + slope3:N_days_post_180 +
          
          # Clustering  
          (1| Arb_PersonId),
                
          # Input data frame
          data=pp_mod_data        )

```

# Display model output
```{r}
# broom.mixed::tidy(lmer_mod_bin)
```

```{r}
model_output <- broom.mixed::tidy(lmer_mod_bin)

# write_csv(x = model_output, here("lmer_model_output.csv"))
```

```{r}
# Set a vector for term labels of the binary variables that were not included in 
# the model because its not necessary to include sex_f and sex_m in the formula.
# These terms are added for completeness when building the final output table
# and are used to create an ordered vector of terms for displaying the table.
term <- c("age_lt_45",
  "sex_f",
  "reth_nhw",
  "year_at_ind0")

model_terms <- model_output %>% pull(term)

# Set the order of the terms to organize them in a subsequent table
ordered_terms <- c(
  model_terms[1],
  term[1],
  model_terms[2:3],
  term[2],
  model_terms[4],
  term[3],
  model_terms[5:9],
  term[4],
  model_terms[10:20]
)

# Create the main table
# stack the vector terms with model_output
tab <- bind_rows(model_output, 
          (data.frame(term) %>% 
             mutate(effect = "fixed"))) %>% 
  
  # Arrange the terms in the previous step to the pre-specified orer
  arrange((factor(term, levels = ordered_terms))) %>% 
  
  # remove columns that are not needed for display
  select(-effect, -group, -statistic, -df) %>% 
  
  # remove rows that are not needed for display
  filter(!term %in% c("sd__(Intercept)", "sd__Observation")) %>%
  
  # convert the estimate for N_days_* to N_months_*
  mutate(estimate = ifelse(grepl("N_days_post", term), estimate * 30, estimate)) %>%
  mutate(std.error = ifelse(grepl("N_days_post", term), std.error * 30, std.error)) %>%
  
  # round values
  mutate(across(estimate:p.value, ~round(., 3))) %>%

  # convert term N_days_* to N_months_* and slope* to human readable
  mutate(term = str_replace(term, "N_days_post_id", "N_months_post_id"),
         term = str_replace(term, "N_days_post_180", "N_months_post_180"),
         term = str_replace(term, "slope1", "Control"),
         term = str_replace(term, "slope2", "Int_PW"),
         term = str_replace(term, "slope3", "Int_No_PW")) %>% 
  
  # relabel all of the values in the "term" column
  mutate(term = case_when(
    term == "age_lt_45" ~ "<45",
    term == "age_45_to_60" ~ "[45, 60)",
    term == "age_gt_60" ~ ">60",
    term == "sex_f" ~ "Female",
    term == "sex_m" ~ "Male",
    term == "reth_nhw" ~ "NonHispanicWhite",
    term == "reth_his" ~ "Hispanic",
    term == "reth_blk" ~ "Black",
    term == "reth_asn" ~ "Asian",
    term == "reth_oth" ~ "Other",
    term == "reth_ukn" ~ "Unknown",
    term == "year_at_ind0" ~ "0",
    term == "year_at_ind1" ~ "1",
    term == "year_at_ind2" ~ "2",
    term == "year_at_ind3" ~ "3",
    term == "Weight_bl" ~ "Weight_bl (kg)",
    term == "Intr" ~ "Intervention",
    .default = term))
```


```{r}
# Add grouping rows for the following terms
tab %>%
  mutate(across(estimate:std.error, ~ as.character(.))) %>%
  mutate(across(p.value, ~sprintf("%.3f", .))) %>% # Converting to character, but preserve the trailing zeros
  gt::gt(rowname_col = "term") %>%
  gt::rows_add(
    term = "Age",
    estimate = "",
    std.error = "",
    p.value = "    ",
    .after = "(Intercept)"
  ) %>%
  gt::rows_add(
    term = "Gender",
    estimate = "",
    std.error = "",
    p.value = "",
    .before = "Female") %>%
  gt::rows_add(
    term = "Race/Ethnicity",
    estimate = "",
    std.error = "",
    p.value = "",
    .after = "Male") %>%
  gt::rows_add(
    term = "Year at Index",
    estimate = "",
    std.error = "",
    p.value = "",
    .before = "0") %>%
  gt::tab_header(
    title = "Per-protocol model w 3 slopes",
    # subtitle = "subtitle place holder"
  )
```

# Create figure, observed vs predicted collapsed over n_months_post_id
```{r, echo = FALSE, eval = FALSE}
# Start with observed weights only
pp_mod_data %>%
  select(Phase, N_months_post_id, Weight_dv) %>%
  group_by(Phase, N_months_post_id) %>%
  summarise(across(Weight_dv, ~ mean(.x, rm.na = TRUE)), .groups = "drop") %>%
  mutate(Phase = ifelse(Phase == 0, "Control", "Intervention")) %>%
  ggplot(., aes(x = N_months_post_id, y = Weight_dv, color = Phase)) +
  geom_line() +
  facet_wrap(~Phase) +
  theme_minimal()
```

```{r}
predicted <- predict(lmer_mod_bin, pp_mod_data, re.form=NA, type="response")

obs_pred <- bind_cols(pp_mod_data, data.frame(predicted)) %>%
  mutate(observed = Weight_dv)
```

```{r}
# 3-line plot of the per-protocol model
obs_pred %>%
  mutate(group = ifelse(slope1 == 1, "Con", ifelse(slope2 == 1, "Int_PW", "Int_nPW")))%>%
  select(Arb_PersonId, N_months_post_id, observed, predicted, Intervention, group) %>%
  group_by(group, Intervention, N_months_post_id) %>%
  summarise(across(observed:predicted, ~ mean(.x, rm.na = TRUE)), .groups = "drop") %>%
  pivot_longer(cols = observed:predicted, names_to = "Type", values_to = "Avg_Weight_kgs") %>%
  # filter(N_months_post_id < 5, Intervention == "Control") %>%
  ggplot(., aes(x = N_months_post_id, y = Avg_Weight_kgs, color = Type, )) +
  # geom_point() +
  geom_line() +
  facet_wrap(~group) +
  theme_minimal()
```

```{r}
# 4-line plot of the per-protocol model
obs_pred %>%
  mutate(pw = ifelse(Arb_PersonId %in% pw_ids, "PW", "nPW"))%>%
  select(Arb_PersonId, N_months_post_id, observed, predicted, Intervention, pw) %>%
  group_by(pw, Intervention, N_months_post_id) %>%
  summarise(across(observed:predicted, ~ mean(.x, rm.na = TRUE)), .groups = "drop") %>%
  pivot_longer(cols = observed:predicted, names_to = "Type", values_to = "Avg_Weight_kgs") %>%
  # filter(N_months_post_id < 5, Intervention == "Control") %>%
  ggplot(., aes(x = N_months_post_id, y = Avg_Weight_kgs, color = pw, )) +
  # geom_point() +
  geom_line(aes(linetype = Type)) +
  facet_wrap(~Intervention) +
  theme_minimal() +
  theme(legend.position = "bottom") +
  labs(color = "", linetype = "")
```


# ITT model with patients that have both control and intervention visits (7,578 patients)
```{r}
# Redefine slope 1, slope 2, slope 3
pp_mod_data %<>%
  mutate(slope1 = ifelse(Intervention == "Control", 1, 0),
         slope2 = ifelse(Intervention == "Control", 0, 1),
         )
```

```{r}
# Linear mixed model with binary variables
lmer_mod_bin <- lmerTest::lmer(Weight_dv ~ 
                   
          # age
          age_45_to_60 + age_gt_60 + 
           
          # sex
          sex_m + 
          
          # race ethnicity
          reth_his + reth_blk + reth_asn + reth_oth + reth_ukn + 
           
          # year at index
          year_at_ind1 + year_at_ind2 + year_at_ind3 + 
           
          # Weight at baseline
          Weight_bl + slope1 +
             
          # Slope1 is the same as Phase/Intervention group
          slope1:N_days_post_id + slope1:N_days_post_180 + 
          
          # Slope2 is the opposi
          slope2:N_days_post_id + slope2:N_days_post_180 + 
          
          
          # Clustering, convergence issues with both dept and personid   
          # (1| DepartmentExternalName) + (1| Arb_PersonId),
          (1| Arb_PersonId),
                
          # Input data frame
          data=pp_mod_data
          )

# broom.mixed::tidy(lmer_mod_bin)

```

# Display model output
```{r}
model_output <- broom.mixed::tidy(lmer_mod_bin)
```

```{r}
# Set a vector for term labels for the reference categories to add in to the 
# vector of ordered terms
term <- c("age_lt_45",
  "sex_f",
  "reth_nhw",
  "year_at_ind0")

model_terms <- model_output %>% pull(term)

# Set the order of the terms to organize them in a subsequent table
ordered_terms <- c(
  model_terms[1],
  term[1],
  model_terms[2:3],
  term[2],
  model_terms[4],
  term[3],
  model_terms[5:9],
  term[4],
  model_terms[10:20]
)

# Create the main table
tab <- 
  
  # stack the vector terms with model_output
  bind_rows(model_output, 
          (data.frame(term) %>% 
             mutate(effect = "fixed"))) %>% 
  
  # Arrange the terms in the previous step to the pre-specified orer
  arrange((factor(term, levels = ordered_terms))) %>% 
  
  # remove columns that are not needed for display
  select(-effect, -group, -statistic, -df) %>% 
  
  # remove rows that are not needed for display
  filter(!term %in% c("sd__(Intercept)", "sd__Observation")) %>%
  
  # convert the estimate for N_days_* to N_months_*
  mutate(estimate = ifelse(grepl("N_days_post", term), estimate * 30, std.error)) %>%
  mutate(std.error = ifelse(grepl("N_days_post", term), std.error * 30, std.error)) %>%
  
  # round values
  mutate(across(estimate:p.value, ~round(., 3))) %>%

  # convert term N_days_* to N_months_* and slope* to human readable
  mutate(term = str_replace(term, "N_days_post_id", "N_months_post_id"),
         term = str_replace(term, "N_days_post_180", "N_months_post_180"),
         term = str_replace(term, "slope1", "Control"),
         term = str_replace(term, "slope2", "Intervention")) %>% 
  
  # relabel all of the values in the "term" column
  mutate(term = case_when(
    term == "age_lt_45" ~ "<45",
    term == "age_45_to_60" ~ "[45, 60)",
    term == "age_gt_60" ~ ">60",
    term == "sex_f" ~ "Female",
    term == "sex_m" ~ "Male",
    term == "reth_nhw" ~ "NonHispanicWhite",
    term == "reth_his" ~ "Hispanic",
    term == "reth_blk" ~ "Black",
    term == "reth_asn" ~ "Asian",
    term == "reth_oth" ~ "Other",
    term == "reth_ukn" ~ "Unknown",
    term == "year_at_ind0" ~ "0",
    term == "year_at_ind1" ~ "1",
    term == "year_at_ind2" ~ "2",
    term == "year_at_ind3" ~ "3",
    term == "Weight_bl" ~ "Weight_bl (kg)",
    term == "Intr" ~ "Intervention",
    .default = term))
```


```{r}
# Add grouping rows for the following terms
# deliniations <- c("Age", "Gender", "Race/Ethnicity", "Year at Index", "Weight_bl (kg)", "Intr:N_months_post_id")

tab %>%
  mutate(across(estimate:std.error, ~ as.character(.))) %>%
  mutate(across(p.value, ~sprintf("%.3f", .))) %>% # Converting to character, but preserve the trailing zeros
  gt::gt(rowname_col = "term") %>%
  gt::rows_add(
    term = "Age",
    estimate = "",
    std.error = "",
    p.value = "    ",
    .after = "(Intercept)"
  ) %>%
  gt::rows_add(
    term = "Gender",
    estimate = "",
    std.error = "",
    p.value = "",
    .before = "Female") %>%
  gt::rows_add(
    term = "Race/Ethnicity",
    estimate = "",
    std.error = "",
    p.value = "",
    .after = "Male") %>%
  gt::rows_add(
    term = "Year at Index",
    estimate = "",
    std.error = "",
    p.value = "",
    .before = "0") %>%
  gt::tab_header(
    title = "ITT model output w patients who have visits in both phases",
    # subtitle = "subtitle place holder"
  )
```