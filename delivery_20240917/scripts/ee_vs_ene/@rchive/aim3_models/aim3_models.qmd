---
title: "Aim 3: EE vs ENE"
format:
  docx:
    reference-doc: "D:/PATHWEIGH/custom-reference-doc.docx"
    toc: true

# format:
#   html:
#     toc: true
#     embed-resources: true

execute: 
  echo: false
---


```{r}
# Load libraries
library(magrittr, include = "%<>%")
pacman::p_load(tidyverse,
               gtsummary,
               here,
               furrr,
               openxlsx,
               geepack)
```

```{r}
# Load data
# Set Cystatin C column to for importing as double, otherwise there may be too
# many NAs in the first x rows where read_csv() decides what column to assign.
# It may then assign first as logical, but then encounters a problem when it
# finally encounters a numeric value.
data <- read_csv("D:\\PATHWEIGH\\delivery_20240917\\data\\aim3_data_20240917.csv",
                 col_types = cols(`Cystatin C` = col_double()))
```

```{r, eval = FALSE}
# How many patients have more than one index visit
data %>%
  filter(IndexVisit == 1) %>%
  group_by(Arb_PersonId) %>%
  count() %>%
  filter(n > 1) %>%
  nrow()
```


```{r, eval = FALSE}
# Check that the ENE group has all 0s in the N_days_post_WPV
data %>%
  filter(EE == 0) %>%
  pull(N_days_post_wpv) %>%
  table()
```


```{r, eval = FALSE}
# Check that the EE group, for visits before the EnrollmentDate (WPV) all
# values should be 0 for N_days_post_wpv

data %>%
  filter(EE == 1) %>%
  filter(EncounterDate <= EnrollmentDate) %>%
  pull(N_days_post_wpv) %>%
  table()

data %>%
  filter(EE == 1) %>%
  filter(EncounterDate == EnrollmentDate) %>%
  pull(N_days_post_wpv) %>%
  table()
```

# Model 1
H0: the likelihood of an individual being in the EE group in the control phase = the likelihood of an individual being in the EE group in the intervention phase
```{r}
# Outcome: binary indicator, one per patient per phase
h1_data <- 
  data %>%
  group_by(Arb_PersonId, Intervention) %>%
  slice_head() %>%
  ungroup()

# Convert Arb_PersonId to factor
h1_data %<>%
  mutate(Arb_PersonId = factor(Arb_PersonId)) %>%
  mutate(Age_cat = relevel(factor(Age_cat), ref = "<=45")) %>%
  mutate(Race_Ethnicity = relevel(factor(Race_Ethnicity), ref = "Non-Hispanic White"))
```

```{r, echo = TRUE}
h1_mod <- geeglm(
    EE ~ Age_cat + Sex + Race_Ethnicity + Year_at_ind + Weight_bl + Intervention,
    family = "binomial",
    id = Arb_PersonId, 
    data = h1_data)
```

```{r}
tbl_regression(h1_mod, exponentiate = TRUE) %>%
  as_gt()
```

# Model 2
```{r}
# Remove the index visits since they contain the baseline weight value
h2_data <- 
  data %>%
  filter(IndexVisit == 0) %>%
  mutate(N_days_post_wpv = ifelse(N_days_post_wpv < 0, 0, N_days_post_wpv)) %>%
  mutate(N_months_post_wpv = N_days_post_wpv/30) %>%
  mutate(Control = ifelse(Intervention == 0, 1, 0)) %>%
  mutate(ENE = ifelse(EE == 0, 1, 0))

# Relevel factors
h2_data %<>%
  mutate(Arb_PersonId = factor(Arb_PersonId)) %>%
  mutate(Age_cat = relevel(factor(Age_cat), ref = "<=45")) %>%
  mutate(Race_Ethnicity = relevel(factor(Race_Ethnicity), ref = "Non-Hispanic White"))
```

```{r, echo = TRUE}
h2_mod <- lmerTest::lmer(
    Weight_dv ~ Age_cat + Sex + Race_Ethnicity + Year_at_ind + Weight_bl + 
    EE + 
    Intervention + 
    EE:Intervention +
    Intervention:EE:N_months_post_id +
    Intervention:ENE:N_months_post_id +
    Control:EE:N_months_post_id +
    Control:ENE:N_months_post_id +
    (1 | Arb_PersonId),
    data = h2_data
)
```

```{r}
# Results in a warning, where fixed effect model matrix is rank deficient so
# dropping 2 columns / coefficients.
```

```{r}
tbl_regression(h2_mod) %>%
  as_gt()
```


```{r, eval = FALSE}
# people with visits in two phases
ids_with_2_phases <- 
data %>%
  group_by(Arb_PersonId) %>%
  summarise(n_distinct = n_distinct(Intervention)) %>%
  ungroup() %>%
  filter(n_distinct > 1) %>%
  pull(Arb_PersonId)

data %>%
  filter(Arb_PersonId %in% ids_with_2_phases) %>%
  group_by(Arb_PersonId) %>%
  summarise(n_distinct = n_distinct(EnrollmentDate))
```

<!-- # Figures -->
```{r, eval = FALSE}
facet_labels <- as_labeller(
  c(`0` = "Usual Care",
    `1` = "Intervention")
)
```

```{r, eval = FALSE}
# lmm for figure
lmer_mod_bin <- lmerTest::lmer(Weight_dv ~

          # age
          age_45_to_60 + age_gt_60 +

          # sex
          sex_m +

          # race ethnicity
          reth_his + reth_blk + reth_asn + reth_oth + reth_ukn +

          # year at index
          year_at_ind1 + year_at_ind2 + year_at_ind3 +

          # Weight at baseline
          Weight_bl + EE + Intervention + EE:Intervention + 

          # Slope1 is the same as Phase/Intervention group
          Intervention:EE:N_months_post_id + Intervention:ENE:N_months_post_id +

          Control:EE:N_months_post_id + Control:ENE:N_months_post_id +

          (1| Arb_PersonId),

          # Input data frame
          data = h2_data
          )
```

```{r, eval = FALSE}
# *** Remove the index visits, because of Weigh_bl
# 
lmer_mod_bin <- lmerTest::lmer(Weight_dv ~

          # age
          age_45_to_60 + age_gt_60 +

          # sex
          sex_m +

          # race ethnicity
          reth_his + reth_blk + reth_asn + reth_oth + reth_ukn +

          # year at index
          year_at_ind1 + year_at_ind2 + year_at_ind3 +

          # Weight at baseline
          Weight_bl + N_days_post_id + N_days_post_WPV_con + N_days_post_WPV_int + N_days_post_PW + 
          
          N_days_post_first_weight_measurement in intervention +

          (1| Arb_PersonId),

          # Input data frame
          data = New_h2_data
          )
```

```{r, eval = FALSE}
# lmer model with log weight as outcome
lmer_mod_log <- lmerTest::lmer(log(Weight_dv) ~

          # age
          age_45_to_60 + age_gt_60 +

          # sex
          sex_m +

          # race ethnicity
          reth_his + reth_blk + reth_asn + reth_oth + reth_ukn +

          # year at index
          year_at_ind1 + year_at_ind2 + year_at_ind3 +

          # Weight at baseline
          Weight_bl + N_days_post_id + N_days_post_WPV_con + N_days_post_WPV_int + N_days_post_PW + 
          
          N_days_post_first_weight_measurement in intervention +

          (1| Arb_PersonId),

          # Input data frame
          data = New_h2_data
          )
```

```{r}

```

```{r, eval = FALSE}
# Create the overlay data by averaging across all visits in each phase of the
# modeling data frame. Represents the non-index/followup visits. Since 
# covariates are time invarying within phase, it's not necessary to capture the 
# index visit
overlay_data <- 
h2_data %>%
  filter(EE == 0) %>%
  # group_by(Arb_PersonId, Intervention) %>%
  # slice_head() %>%
  # ungroup() %>%
  select(age_lt_45, age_45_to_60, age_gt_60, sex_m, EE, ENE,
       reth_his, reth_blk, reth_asn, reth_oth, reth_ukn,
       year_at_ind1, year_at_ind2, year_at_ind3, year_at_ind4,
       Weight_bl, Intervention, Control,
       N_months_post_id) %>%
  group_by(Intervention) %>%
  summarise_all(mean, .groups = "drop") %>%
  slice(rep(1:n(), each = 3)) %>%
  mutate(N_months_post_id = rep(c(0, 6, 18), 2))

```

```{r, eval = FALSE}
# Get the predicted values
overlay_data %<>%
    mutate(predicted = predict(lmer_mod_bin, overlay_data, re.form = NA))
```


```{r, eval = FALSE}
# Create a second data frame with the column names matching those required
# by original plot
overlay_data %<>%
  select(N_months_post_id, predicted, Intervention) %>%
  rename(Avg_weight_kgs = predicted)
```

```{r, eval = FALSE}
# ENE ----------------------------------------------------------------------
observed_vals <- 
    h2_data %>%
    filter(EE == 0) %>%
    mutate(observed = Weight_dv) %>%
    select(Arb_PersonId, Arb_EncounterId, observed, Intervention, EE)
```

```{r, eval = FALSE}
# Need to get the original N_months_post_id variable back into the data set
# to use for plotting along the X axis, because otherwise, N_months_post_id
# is a continous variable and will need to discretized, but it already 
# discretized in the main data?
N_months_post_id <- data %>%
  filter(Arb_EncounterId %in% h2_data$Arb_EncounterId) %>%
  select(Arb_EncounterId, N_months_post_id)
```

```{r, eval = FALSE}
# *** MODIFY THE SEX VARIABLE FOR OTHER FIGURES
observed_vals %<>%
  left_join(., N_months_post_id, by = "Arb_EncounterId") %>%
  select(-Arb_EncounterId) %>%
  group_by(Arb_PersonId, Intervention, N_months_post_id, EE) %>% # *** MODIFY VARIABLE HERE
  summarise_all(mean, .groups = "drop") %>%
  ungroup() %>%
  select(-Arb_PersonId) %>%
  group_by(N_months_post_id, Intervention, EE) %>% # *** MODIFY VARIABLE HERE
  summarise_all(mean, .groups = "drop") %>%
  ungroup() %>%
  mutate(Avg_weight_kgs = observed) %>%
  filter(N_months_post_id <= 18)
```

```{r, eval = FALSE}
# Create the slopes data frame to plote the slopes in control and in 
# intervention as geom_text() elements

# Create a data frame called slopes
# with Intervention, N_months_post_id, Avg_weight_kgs, and lab
# N_months_post id is numeric to place the x value
# Intervention is 0 or 1
# Avg_weight_kgs is a variable to place the y value
# lab will contain text
# Two slopes per intervention one for 1st 6 months, one for subsequent 12 months
# slopes <- overlay_data %>%
  # mutate(slope = Avg_weight_kgs - lag(Avg_weight_kgs)) %>%
  # filter(N_months_post_id != 0) %>%
  # mutate(slope = ifelse(N_months_post_id == 6, slope / 6, slope)) %>%
  # mutate(slope = ifelse(N_months_post_id == 18, slope / 12, slope)) %>%
  # mutate(slope = round(slope, 2)) %>%
  # # mutate(Intervention = ifelse(Intervention == 0, "Con", "Int")) %>%
  # select(-Avg_weight_kgs) %>%
  # group_by(Intervention) %>%
  # pivot_wider(names_from = "N_months_post_id", values_from = "slope") %>%
  # ungroup() %>%
  # mutate(lab = str_c("Rate of change\n0-6mo: ", `6`, " kg/month\n6-18mo: ", `18`, " kg/month"))

# MODIFY SLOPES DATA FRAME TO SET THE X AND Y COORDINATES ---------------------
# slopes %<>%
#   mutate(Avg_weight_kgs = 117,
#          N_months_post_id = 1.5)
```

<!-- ## Eligible but not enrolled -->
```{r, eval = FALSE}
# BASE PLOT OF OBSERVED WEIGHTS IN EACH MONTH AFTER INDEX ---------------------
observed_vals %>%
  filter(EE == 0) %>%
  ggplot(., aes(x = N_months_post_id, y = Avg_weight_kgs)) +
  geom_line() +
  geom_line(data = overlay_data, linetype = 3, color = "blue") +
  facet_wrap(~ Intervention, labeller = facet_labels) +
  theme_minimal() +
  scale_x_continuous(breaks = seq(0,18,3)) +
  # ylim(ylims) +
  ylab("Average weight (kgs)") +
  xlab("Months after index visit") +
  # geom_text(data = slopes, 
  #           aes(x = N_months_post_id, 
  #               y = Avg_weight_kgs, 
  #               label = lab,
  #               hjust = "left"),
  #               size = 2) +
  theme(strip.text = element_text(face="bold"))
```

<!-- ## Eligible and enrolled -->
```{r, eval = FALSE}
# Create the overlay data by averaging across all visits in each phase of the
# modeling data frame. Represents the non-index/followup visits. Since 
# covariates are time invarying within phase, it's not necessary to capture the 
# index visit
overlay_data <- 
h2_data %>%
  filter(EE == 1) %>%
  # group_by(Arb_PersonId, Intervention) %>%
  # slice_head() %>%
  # ungroup() %>%
  select(age_lt_45, age_45_to_60, age_gt_60, sex_m, EE, ENE,
       reth_his, reth_blk, reth_asn, reth_oth, reth_ukn,
       year_at_ind1, year_at_ind2, year_at_ind3, year_at_ind4,
       Weight_bl, Intervention, Control,
       N_months_post_id) %>%
  group_by(Intervention) %>%
  summarise_all(mean, .groups = "drop") %>%
  slice(rep(1:n(), each = 3)) %>%
  mutate(N_months_post_id = rep(c(0, 6, 18), 2))

```

```{r, eval = FALSE}
# Get the predicted values
overlay_data %<>%
    mutate(predicted = predict(lmer_mod_bin, overlay_data, re.form = NA))
```

```{r, eval = FALSE}
# Create a second data frame with the column names matching those required
# by original plot
overlay_data %<>%
  select(N_months_post_id, predicted, Intervention) %>%
  rename(Avg_weight_kgs = predicted)
```

```{r, eval = FALSE}
# EE ----------------------------------------------------------------------
observed_vals <- 
    h2_data %>%
    filter(EE == 1) %>%
    mutate(observed = Weight_dv) %>%
    select(Arb_PersonId, Arb_EncounterId, observed, Intervention, EE)
```

```{r, eval = FALSE}
# Need to get the original N_months_post_id variable back into the data set
# to use for plotting along the X axis, because otherwise, N_months_post_id
# is a continous variable and will need to discretized, but it already 
# discretized in the main data?
N_months_post_id <- data %>%
  filter(Arb_EncounterId %in% h2_data$Arb_EncounterId) %>%
  select(Arb_EncounterId, N_months_post_id)
```

```{r, eval = FALSE}
# *** MODIFY THE SEX VARIABLE FOR OTHER FIGURES
observed_vals %<>%
  left_join(., N_months_post_id, by = "Arb_EncounterId") %>%
  select(-Arb_EncounterId) %>%
  group_by(Arb_PersonId, Intervention, N_months_post_id, EE) %>% # *** MODIFY VARIABLE HERE
  summarise_all(mean, .groups = "drop") %>%
  ungroup() %>%
  select(-Arb_PersonId) %>%
  group_by(N_months_post_id, Intervention, EE) %>% # *** MODIFY VARIABLE HERE
  summarise_all(mean, .groups = "drop") %>%
  ungroup() %>%
  mutate(Avg_weight_kgs = observed) %>%
  filter(N_months_post_id <= 18)
```

```{r, eval = FALSE}
observed_vals %>%
  filter(EE == 1) %>%
  ggplot(., aes(x = N_months_post_id, y = Avg_weight_kgs)) +
  geom_line() +
  geom_line(data = overlay_data, linetype = 3, color = "blue") +
  facet_wrap(~ Intervention, labeller = facet_labels) +
  theme_minimal() +
  scale_x_continuous(breaks = seq(0,18,3)) +
  # ylim(ylims) +
  ylab("Average weight (kgs)") +
  xlab("Months after index visit") +
  # geom_text(data = slopes, 
  #           aes(x = N_months_post_id, 
  #               y = Avg_weight_kgs, 
  #               label = lab,
  #               hjust = "left"),
  #               size = 2) +
  theme(strip.text = element_text(face="bold"))
```

<!-- # Tables: Demographics, health metrics, & comorbidities -->
```{r, eval = FALSE}
# Table of demographics & Healt metrics
c(0, 1) %>%
purrr::map(
  ~ data %>%
    filter(IndexVisit == 1, EE == .x) %>%
    mutate(Smoking_Status = fct_na_value_to_level(Smoking_Status, level = "Unknown")) %>%
    mutate(EOSS = fct_na_value_to_level(factor(EOSS), level = "Unknown")) %>%
    mutate(PHQ2_complete = ifelse(is.na(PHQ2), 0, 1),
          PHQ2_gt_0 = ifelse(PHQ2 > 0, 1, 0),
          PHQ9_complete = ifelse(is.na(PHQ9), 0, 1),
          GAD7_complete = ifelse(is.na(GAD7), 0, 1)) %>%
      
    select(Age, Sex, Race_Ethnicity, Insurance, Weight_kgs, BMI,
        Systolic_blood_pressure, Diastolic_blood_pressure,
        A1C:TSH, -`Cystatin C`, EOSS,
        PHQ2, PHQ2_complete, PHQ2_gt_0, PHQ9, PHQ9_complete, GAD7, GAD7_complete, Smoking_Status,
        Intervention.factor) %>%
    tbl_summary(by = "Intervention.factor",
                digits = everything() ~ 1,
                type = list(c(PHQ2, PHQ9, GAD7) ~ 'continuous'),
                statistic = list(all_continuous() ~ c("{mean} ({sd})")),
                label = list(Age ~ "Age (years)",
                               Weight_kgs ~ "Weight (kg)",
                               Race_Ethnicity ~ "Race/Ethnicity",
                               BMI ~ "BMI (kg/m\U00B2)", # U00B2 will display meters squared
                               Systolic_blood_pressure ~ "Systolic BP (mmHg)",
                               Diastolic_blood_pressure ~ "Diastolic BP (mmHg)",
                               Smoking_Status ~ "Smoking Status")
                
                ) %>%
    modify_header(stat_1 = "**Usual Care**",
                  stat_2 = "**Intervention**")
    ) %>%
    tbl_merge(tab_spanner = c("**ENE**", "**EE**"))
```

```{r, eval = FALSE}
# Table of comorbidities

# Get the comorbidity names ordered by the frequency in the control phase index
# visits for all patients
ordered_comorbidity_names <-
  data %>%
    filter(Intervention.factor == "Control",
          IndexVisit == 1) %>%
    select(Hypertension:`Body-image dissatisfaction`) %>%
    summarise_all(list(sum)) %>%
    pivot_longer(., cols = everything(), names_to = "comorbidity", values_to = "n") %>%
    arrange(desc(n)) %>%
    filter(n > 1) %>%
    pull(comorbidity)


# Create a merged table 
c(0, 1) %>%
purrr::map(
  ~ data %>%
    filter(IndexVisit == 1, EE == .x) %>%
    select(all_of(ordered_comorbidity_names), Intervention.factor) %>%
    mutate(Intervention.factor = factor(Intervention.factor, levels = c("Control", "Intervention"))) %>%
    mutate(across(all_of("Body-image dissatisfaction"), ~ factor(., levels = c("0", "1")))) %>%
    tbl_summary(by = "Intervention.factor",
                digits = everything() ~ 1) %>%
    modify_header(stat_1 = "**Usual Care**",
                  stat_2 = "**Intervention**")
    ) %>%
    tbl_merge(tab_spanner = c("**ENE**", "**EE**"))
```


```{r}
# # How many patients with 2 index visits
# data %>%
#   filter(IndexVisit == 1, EE == 1) %>%
#   group_by(Arb_PersonId) %>%
#   count() %>%
#   filter(n > 1)
```
