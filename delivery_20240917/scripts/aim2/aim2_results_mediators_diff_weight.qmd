---
title: "Aim2: Mediators"
# format: html
format:
  docx:
    reference-doc: "D:/PATHWEIGH/custom-reference-doc.docx"

execute: 
  echo: false
---

```{r}
# *****************************************************************************
# Carlos Rodriguez, PhD. CU Anschutz Dept. of Family Medicine.
# aim2_results_mediators where the outcome is the difference between the base
# line weight and the observed weight, and without the Weight_bl as a covariate

# The purpose of this script is to display the output from a series of
# mediation models for PATHWEIGH AIM 2.
# *****************************************************************************
```

```{r}
# Load data
library(magrittr, include.only = "%<>%")
pacman::p_load(tidyverse,
               gtsummary)
```

```{r}
data <- read_csv( 
          file = "D:/PATHWEIGH/delivery_20240917/data/aim2_data_20240917.csv",
          show_col_types = FALSE
          )

# Remove variables that caused confusion
data %<>%
  select(-slope1, -slope2, -slope3, -slope4)

# Create new variables to aid in interpretation of output
data %<>%
  mutate(Phase = Intervention) %>%
  mutate(Control = ifelse(Intervention == "Control", 1, 0),
         Intervention = ifelse(Intervention == "Intervention", 1, 0))
```


```{r}
# Create the modeling data frame %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
mod_data <- data %>% filter(IndexVisit != 1)

mod_data %<>%
  mutate(Arb_PersonId = factor(Arb_PersonId))

mod_data %<>%
  mutate(Race_Ethnicity = relevel(factor(Race_Ethnicity), ref = "Non-Hispanic White")) %>%
  mutate(Age_cat = relevel(factor(Age_cat),ref = "<=45"))

# Convert the N_days_post_* variables to N_months_post_* by dividing days by 30
# should be equivalent to multiplying the parameter estimates of N_days_post_*
# by 30 in the output table, but much easier to work with. Otherwise it is a 
# challenge to modify tidy() or tbl_regression() output for display in a word
# or .html document.
mod_data %<>%
  mutate(N_months_post_id = N_days_post_id / 30,
         N_months_post_180 = N_days_post_180 / 30)

# create 4 new variables for mediation models
mod_data %<>%
  mutate(N_months_post_id_con = Control * N_months_post_id,
         N_months_post_id_int = Intervention * N_months_post_id,
         N_months_post_180_con = Control * N_months_post_180,
         N_months_post_180_int = Intervention * N_months_post_180)

# Create a binary variable to indicate whether or not the patient is in Cohort 3
mod_data %<>%
  mutate(Cohort3 = ifelse(Cohort == "Cohort3", 1, 0))
```


```{r}
# Create a composite mediator
## Get the top 25% engagement score
top_25_eng <- mod_data %>%
  group_by(DepartmentExternalName, Intervention) %>%
  slice_head() %>%
  ungroup() %>%
  group_by(Intervention) %>%
  # summarise(median_engagement = median(Engagement))
  summarise(top_25_eng_cutoff = quantile(Engagement, probs = c(0.75), na.rm = TRUE))

## Get the median number of follow up visits
top_25_fu <- mod_data %>%
  group_by(Arb_PersonId, Intervention) %>%
  slice_head() %>%
  ungroup() %>%
  group_by(Intervention) %>%
  summarise(top_25_fu_cutoff = quantile(n_follow_up, probs = c(0.75), na.rm = TRUE)) 

mod_data %<>%
  left_join(., top_25_eng, by = "Intervention") %>%
  left_join(., top_25_fu, by = "Intervention")


# Create a binary variable to indicate whether or not the value is in the top 25%
mod_data %<>%
  mutate(top_25_eng = ifelse(Engagement >= top_25_eng_cutoff, 1, 0),
         top_25_fu = ifelse(n_follow_up >= top_25_fu_cutoff, 1, 0))


# Create the composite variable
mod_data %<>%
  mutate(composite_mediator = ifelse(
    Any_ref == 1 | Meds_AOM == 1 | Meds_Loss == 1 | 
    Cohort3 == 1 | top_25_eng == 1 | top_25_fu ==1, 1, 0))
```

```{r}
# Count the number of weight prioritized visits
n_wpvs <- data %>%
  filter(WPV == 1) %>%
  group_by(Arb_PersonId, Intervention) %>%
  count() %>%
  rename(n_wpvs = n) %>%
  mutate(Arb_PersonId = factor(Arb_PersonId))


# Count the number of visits with pw tools
n_pw_visits <- data %>%
  filter(PW_Visit == 1) %>%
  group_by(Arb_PersonId, Intervention) %>%
  count() %>%
  rename(n_pw_visits = n) %>%
  mutate(Arb_PersonId = factor(Arb_PersonId))

# Merge in the two variables
mod_data %<>% 
  left_join(., n_wpvs, by = c("Arb_PersonId", "Intervention")) %>%
  left_join(., n_pw_visits, by = c("Arb_PersonId", "Intervention"))


# Fix the NAs created after merging the counts of WPVs and PW visits
mod_data %<>%
  mutate(across(n_wpvs:n_pw_visits, ~ifelse(is.na(.x), 0, .x)))

```

```{r}
# Create a variable where the dv is the difference between baseline and the observed value
mod_data %<>%
  mutate(Weight_dv = Weight_kgs - Weight_bl)
```

```{r}
mediators <- 
  c(
    "Any_ref",
    # "BariatricSurgery", # resulted in glm.fit: fitted probabilities numerically 0 or 1 occurred only 645 with surgery
    "Meds_AOM",
    "Meds_Gain",
    "Meds_Loss",
    "Engagement",
    # "Cohort3", # Should not be a mediator, the intervention has to change it some way
    "n_follow_up",
    "composite_mediator", # based off of cohort
    "n_wpvs"
    # "n_pw_visits" # model did not converge
    )
```

## Original Mediator Models
### PART1: Mediator model
```{r, eval = FALSE, echo = TRUE}
# PART 1: Do the IVs predict the mediator
med_mod <- glm(

  [MEDIATOR] ~ Age_cat + Sex + Race_Ethnicity + Year_at_ind + Control +

  N_months_post_id_con + N_months_post_180_con + 
    
  N_months_post_id_int + N_months_post_180_int,
  
  data = mod_data,

  family = "binomial"/"poisson" # Dependent on the mediator
)
```

### PART2: Outcome model
```{r, eval = FALSE, echo = TRUE}
# PART 2: Model the outcome adjusting for the mediator
out_mod <-  lm(

  Weight_dv ~ Age_cat + Sex + Race_Ethnicity + Year_at_ind + Control +

  [MEDIATOR] + 

  N_months_post_id1 + N_months_post_180_1 + 
    
  N_months_post_id2 + N_months_post_180_2,
  
  data = mod_data
)
```

### PART3: Mediate function to estimate the ACME and ADE
```{r, eval = FALSE, echo = TRUE}
med_fit <- mediation::mediate(med_mod, out_mod, 
  treat = "Control", 
  mediator = [MEDIATOR],
  robustSE = TRUE,
  sims = 100)

summary(med_fit)
```

```{r, eval = FALSE, echo = TRUE}
# OTHER TERMS TO TEST
med_fit <- mediation::mediate(med_mod, out_mod, treat = "N_months_post_id_int", mediator = [MEDIATOR])
med_fit <- mediation::mediate(med_mod, out_mod, treat = "N_months_post_180_int", mediator = [MEDIATOR])
med_fit <- mediation::mediate(med_mod, out_mod, treat = "N_months_post_id_con", mediator = [MEDIATOR])
med_fit <- mediation::mediate(med_mod, out_mod, treat = "N_months_post_180_con", mediator = [MEDIATOR])
```

```{r}
extract_mediation_summary <- function (x) { 

  clp <- 100 * x$conf.level
  isLinear.y <- ((class(x$model.y)[1] %in% c("lm", "rq")) || 
                   (inherits(x$model.y, "glm") && x$model.y$family$family == 
                      "gaussian" && x$model.y$family$link == "identity") || 
                   (inherits(x$model.y, "survreg") && x$model.y$dist == 
                      "gaussian"))

  printone <- !x$INT && isLinear.y

  if (printone) {

    smat <- c(x$d1, x$d1.ci, sprintf("%.4f", x$d1.p))
    smat <- rbind(smat, c(x$z0, x$z0.ci, sprintf("%.4f", x$z0.p)))
    smat <- rbind(smat, c(x$tau.coef, x$tau.ci, sprintf("%.4f", x$tau.p)))
    smat <- rbind(smat, c(x$n0, x$n0.ci, sprintf("%.4f", x$n0.p)))

    # Rename columns
    rownames(smat) <- c("ACME", "ADE", "Total Effect", "Prop. Mediated")

  } else {
    smat <- c(x$d0, x$d0.ci, x$d0.p)
    smat <- rbind(smat, c(x$d1, x$d1.ci, x$d1.p))
    smat <- rbind(smat, c(x$z0, x$z0.ci, x$z0.p))
    smat <- rbind(smat, c(x$z1, x$z1.ci, x$z1.p))
    smat <- rbind(smat, c(x$tau.coef, x$tau.ci, x$tau.p))
    smat <- rbind(smat, c(x$n0, x$n0.ci, x$n0.p))
    smat <- rbind(smat, c(x$n1, x$n1.ci, x$n1.p))
    smat <- rbind(smat, c(x$d.avg, x$d.avg.ci, x$d.avg.p))
    smat <- rbind(smat, c(x$z.avg, x$z.avg.ci, x$z.avg.p))
    smat <- rbind(smat, c(x$n.avg, x$n.avg.ci, x$n.avg.p))

    rownames(smat) <- c("ACME (control)", "ACME (treated)", 
                        "ADE (control)", "ADE (treated)", "Total Effect", 
                        "Prop. Mediated (control)", "Prop. Mediated (treated)", 
                        "ACME (average)", "ADE (average)", "Prop. Mediated (average)")

  }

  colnames(smat) <- c("Estimate", paste(clp, "% CI Lower", sep = ""), 
                      paste(clp, "% CI Upper", sep = ""), "p-value")
  smat

}

# extract_mediation_summary(summary(med_fit))
```

```{r}
format_mediation <- function(output) {

  mediation_tab <- output %>% 
  as.data.frame() %>% 
  rownames_to_column(., "Characteristic") %>%
  as_tibble() %>%
  mutate(across(Estimate:`95% CI Upper`, ~ as.numeric(.))) %>%
  mutate(across(where(is.numeric), ~ round(., 4))) 
  
  return(mediation_tab)
}  
```

```{r, warnings = FALSE}
#| echo: false
#| results: 'asis'

for (i in 1:length(mediators)) {
  # Set the mediator variable for the model
  mediator <- mediators[i]

  # Set the number of sims
  n_sims <- 100

  cat("## ", mediator, "\n\n")

  cat("### ", mediator, "Part1: Mediator Model", "\n\n")
  
  # PART 1: Do the IVs predict the mediator
  part1_formula <- as.formula(str_c(mediator, 
  " ~ Age_cat + Sex + Race_Ethnicity + Year_at_ind + Control + N_months_post_id_int + N_months_post_180_int + N_months_post_id_con + N_months_post_180_con"))

  # Determine if the mediator is binary 
  distinct_vals <- mod_data %>% 
    select(!!sym(mediator)) %>% 
    n_distinct()


  # If the mediator is binary use binomial, otherwise use poisson
  if (distinct_vals == 2) {
    med_mod <- glm(part1_formula, data = mod_data, family = binomial)
  } else if (mediator %in% c("Engagement", "n_wpvs", "n_pw_visits")) {
    med_mod <- glm(part1_formula, data = mod_data, family = poisson)
  }
    
  tab <- 
    tbl_regression(med_mod, estimate_fun = ~style_sigfig(., digits = 4)) %>%
    as_gt() %>% 
    gt::as_word()
  
  # Display table in word -----------------------------------------------------
  cat("```{=openxml}", tab, "```", sep = "\n")

  cat("### ", mediator, "Part2: Outcome Model", "\n\n")
  # PART 2: Model the outcome adjusting for the mediator
  part2_formula <- as.formula(str_c("Weight_dv ~ Age_cat + Sex + Race_Ethnicity + Year_at_ind + Control + ", mediator, " + N_months_post_id_int + N_months_post_180_int + N_months_post_id_con + N_months_post_180_con"))

  out_mod <-  lm(part2_formula, data = mod_data)

  tab2 <- 
    tbl_regression(out_mod, estimate_fun = ~style_sigfig(., digits = 4)) %>%
    as_gt() %>% 
    gt::as_word()

  # Display table in word -----------------------------------------------------
  cat("```{=openxml}", tab2, "```", sep = "\n")


  # Mediator and Intervention -------------------------------------------------
  cat("### " , "Mediator and Intervention")
  
  med_fit <- mediation::mediate(med_mod, out_mod, treat = "Control", mediator = mediator, sims = n_sims)
  
  output <- extract_mediation_summary(summary(med_fit)) 
  
  mtab <- format_mediation(output)
  
  print(knitr::kable(mtab))
  
  cat("\n\n")


  # Mediator and N_months_post_id in the intervention phase ---------------
  cat("### " , "Mediator and N_months_post_id in the intervention phase")

  med_fit <- mediation::mediate(med_mod, out_mod, treat = "N_months_post_id_int", mediator = mediator, sims = n_sims)

  output <- extract_mediation_summary(summary(med_fit))

  mtab <- format_mediation(output)
  
  print(knitr::kable(mtab))

  cat("\n\n")


  # Mediator and N_months_post_id in the intervention phase ---------------
  cat("### " , "Mediator and N_months_post_180 in the intervention phase")

  med_fit <- mediation::mediate(med_mod, out_mod, treat = "N_months_post_180_int", mediator = mediator, sims = n_sims)
  
  output <- extract_mediation_summary(summary(med_fit))

  mtab <- format_mediation(output)

  print(knitr::kable(mtab))

  cat("\n\n")


  # Mediator and N_months_post_id in the control phase --------------------
  cat("### " , "Mediator and N_months_post_id in the control phase")
  
  med_fit <- mediation::mediate(med_mod, out_mod, treat = "N_months_post_id_con", mediator = mediator, sims = n_sims)
  
  output <- extract_mediation_summary(summary(med_fit))

  mtab <- format_mediation(output)

  print(knitr::kable(mtab))

  cat("\n\n")


  # Mediator and N_months_post_180 in the control phase -----------------------
  cat("### " , "Mediator and N_months_post_180 in the control phase")
  
  med_fit <- mediation::mediate(med_mod, out_mod, treat = "N_months_post_180_con", mediator = mediator, sims = n_sims)
  
  output <- extract_mediation_summary(summary(med_fit))

  mtab <- format_mediation(output)

  print(knitr::kable(mtab))

  cat("\n\n")
}
```


## Mediator models with modified specifications

```{r}
# Create the N_months_post_180_v2 variable
mod_data %<>%
  mutate(N_months_post_180_v2 = ifelse(N_months_post_id <= 6, N_months_post_id - 6, 0))

# create 4 new variables for mediation models
mod_data %<>%
  mutate(N_months_post_id_con = Control * N_months_post_id,
         N_months_post_id_int = Intervention * N_months_post_id,
         N_months_post_180_con = Control * N_months_post_180_v2,
         N_months_post_180_int = Intervention * N_months_post_180_v2)
```


### PART1: Mediator model
```{r, eval = FALSE, echo = TRUE}
# PART 1: Do the IVs predict the mediator
med_mod <- glm(

  [MEDIATOR] ~ Age_cat + Sex + Race_Ethnicity + Year_at_ind + Weight_bl + Control +

  N_months_post_id_con + N_months_post_180_con + 
    
  N_months_post_id_con + N_months_post_180_int,
  
  data = mod_data,

  family = "binomial"/"poisson" # Dependent on the mediator
)
```

### PART2: Outcome model
```{r, eval = FALSE, echo = TRUE}
# PART 2: Model the outcome adjusting for the mediator
out_mod <-  lm(

  Weight_dv ~ Age_cat + Sex + Race_Ethnicity + Year_at_ind + Weight_bl + Control +

  [MEDIATOR] + 

  N_months_post_id1 + N_months_post_180_1 + 
    
  N_months_post_id2 + N_months_post_180_2,
  
  data = mod_data
)
```

### PART3: Mediate function to estimate the ACME and ADE
```{r, eval = FALSE, echo = TRUE}
med_fit <- mediation::mediate(med_mod, out_mod, 
  treat = "Control", 
  mediator = [MEDIATOR],
  robustSE = TRUE,
  sims = 100)

summary(med_fit)
```

## Mediate function with modified model specification
```{r}
```

```{r}
#| echo: false
#| results: 'asis'

for (i in 1:length(mediators)) {
  # Set the mediator variable for the model
  mediator <- mediators[i]

  # Set the number of sims
  n_sims <- 100

  cat("## ", mediator, "\n\n")

  cat("### ", mediator, "Part1: Mediator Model", "\n\n")
  
  # PART 1: Do the IVs predict the mediator
  part1_formula <- as.formula(str_c(mediator, 
  " ~ Age_cat + Sex + Race_Ethnicity + Year_at_ind + Weight_bl + Control + N_months_post_id_int + N_months_post_180_int + N_months_post_id_con + N_months_post_180_con"))

  # Determine if the mediator is binary 
  distinct_vals <- mod_data %>% 
    select(!!sym(mediator)) %>% 
    n_distinct()


  # If the mediator is binary use glm(), otherwise use lm()
  if (distinct_vals == 2) {
    med_mod <- glm(part1_formula, data = mod_data, family = binomial)
  } else if (mediator == "Engagement") {
    med_mod <- glm(part1_formula, data = mod_data, family = poisson)
  }
    
  tab <- 
    tbl_regression(med_mod, estimate_fun = ~style_sigfig(., digits = 4)) %>%
    as_gt() %>% 
    gt::as_word()
  
  # Display table in word -----------------------------------------------------
  cat("```{=openxml}", tab, "```", sep = "\n")

  cat("### ", mediator, "Part2: Outcome Model", "\n\n")
  # PART 2: Model the outcome adjusting for the mediator
  part2_formula <- as.formula(str_c("Weight_dv ~ Age_cat + Sex + Race_Ethnicity + Year_at_ind + Weight_bl + Control + ", mediator, " + N_months_post_id_int + N_months_post_180_int + N_months_post_id_con + N_months_post_180_con"))

  out_mod <-  lm(part2_formula, data = mod_data)

  tab2 <- 
    tbl_regression(out_mod, estimate_fun = ~style_sigfig(., digits = 4)) %>%
    as_gt() %>% 
    gt::as_word()

  # Display table in word -----------------------------------------------------
  cat("```{=openxml}", tab2, "```", sep = "\n")


  # Mediator and Intervention -------------------------------------------------
  cat("### " , "Mediator and Intervention")
  
  med_fit <- mediation::mediate(med_mod, out_mod, treat = "Control", mediator = mediator, sims = n_sims)
  
  output <- extract_mediation_summary(summary(med_fit)) 
  
  mtab <- format_mediation(output)
  
  print(knitr::kable(mtab))
  
  cat("\n\n")


  # Mediator and N_months_post_id in the intervention phase ---------------
  cat("### " , "Mediator and N_months_post_id in the intervention phase")

  med_fit <- mediation::mediate(med_mod, out_mod, treat = "N_months_post_id_int", mediator = mediator, sims = n_sims)

  output <- extract_mediation_summary(summary(med_fit))

  mtab <- format_mediation(output)
  
  print(knitr::kable(mtab))

  cat("\n\n")


  # Mediator and N_months_post_id in the intervention phase ---------------
  cat("### " , "Mediator and N_months_post_180 in the intervention phase")

  med_fit <- mediation::mediate(med_mod, out_mod, treat = "N_months_post_180_int", mediator = mediator, sims = n_sims)
  
  output <- extract_mediation_summary(summary(med_fit))

  mtab <- format_mediation(output)

  print(knitr::kable(mtab))

  cat("\n\n")


  # Mediator and N_months_post_id in the control phase --------------------
  cat("### " , "Mediator and N_months_post_id in the control phase")
  
  med_fit <- mediation::mediate(med_mod, out_mod, treat = "N_months_post_id_con", mediator = mediator, sims = n_sims)
  
  output <- extract_mediation_summary(summary(med_fit))

  mtab <- format_mediation(output)

  print(knitr::kable(mtab))

  cat("\n\n")


  # Mediator and N_months_post_180 in the control phase -----------------------
  cat("### " , "Mediator and N_months_post_180 in the control phase")
  
  med_fit <- mediation::mediate(med_mod, out_mod, treat = "N_months_post_180_con", mediator = mediator, sims = n_sims)
  
  output <- extract_mediation_summary(summary(med_fit))

  mtab <- format_mediation(output)

  print(knitr::kable(mtab))

  cat("\n\n")
}
```
